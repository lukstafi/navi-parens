{
  "name": "navi-parens",
  "publisher": "lukstafi",
  "displayName": "Navi Parens",
  "description": "Navigate structured code with convenient key shortcuts.",
  "version": "0.0.1",
  "engines": {
    "vscode": "^1.73.0"
  },
  "categories": [
    "Keymaps",
    "Other"
  ],
	"license": "MIT",
	"repository": {
		"type": "git",
		"url": "https://github.com/lukstafi/navi-parens"
	},
	"bugs": {
		"url": "https://github.com/lukstafi/navi-parens/issues"
	},
  "activationEvents": [
    "onCommand:navi-parens.goPastNextScope",
    "onCommand:navi-parens.goPastPreviousScope",
    "onCommand:navi-parens.goToUpScope",
    "onCommand:navi-parens.goToDownScope",
    "onCommand:navi-parens.goToBeginScope",
    "onCommand:navi-parens.goToEndScope",
    "onCommand:navi-parens.selectPastNextScope",
    "onCommand:navi-parens.selectPastPreviousScope",
    "onCommand:navi-parens.selectToUpScope",
    "onCommand:navi-parens.selectToDownScope",
    "onCommand:navi-parens.selectToBeginScope",
    "onCommand:navi-parens.selectToEndScope",
    "onCommand:navi-parens.goToPreviousEmptyLine",
    "onCommand:navi-parens.goToNextEmptyLine",
    "onCommand:navi-parens.cycleBracketScopeMode",
    "onCommand:navi-parens.cycleBlockScopeMode"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "navi-parens.goPastNextScope",
        "title": "Go To Next Scope: Go past the next same-level closing bracket/scope"
      },
      {
        "command": "navi-parens.goPastPreviousScope",
        "title": "Go To Previous Scope: Go to the previous same-level opening bracket/scope"
      },
      {
        "command": "navi-parens.goToUpScope",
        "title": "Go To Up Scope: Go outside the opening of the current level"
      },
      {
        "command": "navi-parens.goToDownScope",
        "title": "Go To Down Scope: Go outside the closing of the current level"
      },
      {
        "command": "navi-parens.goToBeginScope",
        "title": "Go To Begin Scope: Go near the opening of the current level but stay inside scope"
      },
      {
        "command": "navi-parens.goToEndScope",
        "title": "Go To End Scope: Go near the closing of the current level but stay inside scope"
      },
      {
        "command": "navi-parens.goToPreviousEmptyLine",
        "title": "Go To Previous Empty Line: Go to the previous line with only whitespace (or empty)"
      },
      {
        "command": "navi-parens.goToNextEmptyLine",
        "title": "Go To Next Empty Line: Go to the next line with only whitespace (or empty)"
      },
      {
        "command": "navi-parens.selectPastNextScope",
        "title": "Select To Next Scope: Select past the next same-level closing bracket/scope"
      },
      {
        "command": "navi-parens.selectPastPreviousScope",
        "title": "Select To Previous Scope: Select to the previous same-level opening bracket/scope"
      },
      {
        "command": "navi-parens.selectToUpScope",
        "title": "Slect To Up Scope: Select till outside the opening of the current level"
      },
      {
        "command": "navi-parens.selectToDownScope",
        "title": "Select To Down Scope: Select till outside the closing of the current level"
      },
      {
        "command": "navi-parens.selectToBeginScope",
        "title": "Slect To Begin Scope: Select to near the opening of the current level but stay inside scope"
      },
      {
        "command": "navi-parens.selectToEndScope",
        "title": "Select To End Scope: Select to near the closing of the current level but stay inside scope"
      },
      {
        "command": "navi-parens.selectToPreviousEmptyLine",
        "title": "Select To Previous Empty Line: Select to the previous line with only whitespace (or empty)"
      },
      {
        "command": "navi-parens.selectToNextEmptyLine",
        "title": "Select To Next Empty Line: Select to the next line with only whitespace (or empty)"
      },
      {
        "command": "navi-parens.cycleBracketScopeMode",
        "title": "Cycle Bracket Scope Mode: switch the algorithm navigating delimiters"
      },
      {
        "command": "navi-parens.cycleBlockScopeMode",
        "title": "Cycle Bracket Scope Mode: switch the algorithm navigating code blocks"
      }
    ],
    "configuration": {
      "title": "Navi Parens",
      "properties": {
        "navi-parens.rebind": {
          "markdownDescription": "How to deal with the `shift+alt+i` binding conflict. If `true`, the built-in command becomes `shift+alt+p`. If `false`, we add navigation to `ctrl+alt+o` instead of `alt+i`",
          "type": "boolean",
          "default": "true",
          "scope": "application"
        },
        "navi-parens.blockScopeMode": {
          "markdownDescription": "Where the non-bracket structure information comes from. If `Semantic`, uses VSCode symbol providers. If `Indentation`, generates symbols from indentation. If `None`, there are no symbols",
          "type": "string",
          "enum": ["Semantic", "Indentation", "None"],
          "default": "Semantic",
          "scope": "language-overridable"
        },
        "navi-parens.bracketScopeMode": {
          "markdownDescription": "What algorithm decides on bracket-based navigation. If `JumpToBracket`, uses the built-in `ctrl+shift+\\` command. If `Raw`, matches any of the opening with any of the closing brackets disregarding other context. If `None`, there is no bracket-based navigation",
          "type": "string",
          "enum": ["JumpToBracket", "Raw", "None"],
          "default": "JumpToBracket",
          "scope": "language-overridable"
        },
        "navi-parens.closingBrackets": {
          "description": "The superset of supported closing delimiters (the default should be enough)",
          "type": "array",
          "default": [")", "]", "}", ">"],
          "scope": "language-overridable"
        },
        "navi-parens.openingBrackets": {
          "description": "The superset of supported opening delimiters (the default should be enough)",
          "type": "array",
          "default": ["(", "[", "{", "<"],
          "scope": "language-overridable"
        },
        "navi-parens.closingBracketsRaw": {
          "markdownDescription": "The closing delimiters for the `Raw` `bracketScopeMode`",
          "type": "array",
          "default": [")", "]", "}"],
          "scope": "language-overridable"
        },
        "navi-parens.openingBracketsRaw": {
          "markdownDescription": "The closing delimiters for the `Raw` `bracketScopeMode`",
          "type": "array",
          "default": ["(", "[", "{"],
          "scope": "language-overridable"
        }
      }
    },
    "keybindings": [
      {
        "command": "-editor.action.insertCursorAtEndOfEachLineSelected",
        "key": "shift+alt+i",
        "when": "editorTextFocus && config.navi-parens.rebind"
      },
      {
        "command": "editor.action.insertCursorAtEndOfEachLineSelected",
        "key": "shift+alt+p",
        "when": "editorTextFocus && config.navi-parens.rebind"
      },
      {
        "command": "cursorRight",
        "key": "alt+l",
        "when": "editorTextFocus"
      },
      {
        "command": "cursorLeft",
        "key": "alt+j",
        "when": "editorTextFocus"
      },
      {
        "command": "cursorUp",
        "key": "alt+i",
        "when": "editorTextFocus"
      },
      {
        "command": "cursorUp",
        "key": "ctrl+alt+o",
        "when": "editorTextFocus && !config.navi-parens.rebind"
      },
      {
        "command": "cursorDown",
        "key": "alt+k",
        "when": "editorTextFocus"
      },
      {
        "command": "cursorHome",
        "key": "alt+a",
        "when": "editorTextFocus"
      },
      {
        "command": "cursorEnd",
        "key": "alt+e",
        "when": "editorTextFocus"
      },
      {
        "command": "cursorWordLeft",
        "key": "alt+h",
        "when": "editorTextFocus"
      },
      {
        "command": "cursorWordEndRight",
        "key": "alt+;",
        "when": "editorTextFocus"
      },
      {
        "command": "cursorRightSelect",
        "key": "shift+alt+l",
        "when": "editorTextFocus"
      },
      {
        "command": "cursorLeftSelect",
        "key": "shift+alt+j",
        "when": "editorTextFocus"
      },
      {
        "command": "cursorUpSelect",
        "key": "shift+alt+i",
        "when": "editorTextFocus && config.navi-parens.rebind"
      },
      {
        "command": "cursorUpSelect",
        "key": "ctrl+shift+alt+o",
        "when": "editorTextFocus && !config.navi-parens.rebind"
      },
      {
        "command": "cursorDownSelect",
        "key": "shift+alt+k",
        "when": "editorTextFocus"
      },
      {
        "command": "cursorHomeSelect",
        "key": "shift+alt+a",
        "when": "editorTextFocus"
      },
      {
        "command": "cursorEndSelect",
        "key": "shift+alt+e",
        "when": "editorTextFocus"
      },
      {
        "command": "cursorWordLeftSelect",
        "key": "shift+alt+h",
        "when": "editorTextFocus"
      },
      {
        "command": "cursorWordEndRightSelect",
        "key": "shift+alt+;",
        "when": "editorTextFocus"
      },
      {
        "command": "navi-parens.goPastNextScope",
        "key": "ctrl+alt+l",
        "when": "editorTextFocus"
      },
      {
        "command": "navi-parens.goPastPreviousScope",
        "key": "ctrl+alt+j",
        "when": "editorTextFocus"
      },
      {
        "command": "navi-parens.goToUpScope",
        "key": "ctrl+alt+i",
        "when": "editorTextFocus"
      },
      {
        "command": "navi-parens.goToDownScope",
        "key": "ctrl+alt+k",
        "when": "editorTextFocus"
      },
      {
        "command": "navi-parens.goToBeginScope",
        "key": "ctrl+alt+a",
        "when": "editorTextFocus"
      },
      {
        "command": "navi-parens.goToEndScope",
        "key": "ctrl+alt+e",
        "when": "editorTextFocus"
      },
      {
        "command": "navi-parens.goToPreviousEmptyLine",
        "key": "ctrl+alt+h",
        "when": "editorTextFocus"
      },
      {
        "command": "navi-parens.goToNextEmptyLine",
        "key": "ctrl+alt+;",
        "when": "editorTextFocus"
      },
      {
        "command": "navi-parens.selectPastNextScope",
        "key": "shift+ctrl+alt+l",
        "when": "editorTextFocus"
      },
      {
        "command": "navi-parens.selectPastPreviousScope",
        "key": "shift+ctrl+alt+j",
        "when": "editorTextFocus"
      },
      {
        "command": "navi-parens.selectToUpScope",
        "key": "shift+ctrl+alt+i",
        "when": "editorTextFocus"
      },
      {
        "command": "navi-parens.selectToDownScope",
        "key": "shift+ctrl+alt+k",
        "when": "editorTextFocus"
      },
      {
        "command": "navi-parens.selectToBeginScope",
        "key": "shift+ctrl+alt+a",
        "when": "editorTextFocus"
      },
      {
        "command": "navi-parens.selectToEndScope",
        "key": "shift+ctrl+alt+e",
        "when": "editorTextFocus"
      },
      {
        "command": "navi-parens.selectToPreviousEmptyLine",
        "key": "shift+ctrl+alt+h",
        "when": "editorTextFocus"
      },
      {
        "command": "navi-parens.selectToNextEmptyLine",
        "key": "shift+ctrl+alt+;",
        "when": "editorTextFocus"
      },
      {
        "command": "navi-parens.cycleBracketScopeMode",
        "key": "ctrl+alt+p",
        "when": "editorTextFocus"
      },
      {
        "command": "navi-parens.cycleBlockScopeMode",
        "key": "shift+ctrl+alt+p",
        "when": "editorTextFocus"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/vscode": "^1.73.0",
    "@types/glob": "^8.0.0",
    "@types/mocha": "^10.0.0",
    "@types/node": "16.x",
    "@typescript-eslint/eslint-plugin": "^5.42.0",
    "@typescript-eslint/parser": "^5.42.0",
    "eslint": "^8.26.0",
    "glob": "^8.0.3",
    "mocha": "^10.1.0",
    "typescript": "^4.8.4",
    "@vscode/test-electron": "^2.2.0"
  }
}
